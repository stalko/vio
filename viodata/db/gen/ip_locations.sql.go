// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: ip_locations.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getCountIPLocationsByIPAddress = `-- name: GetCountIPLocationsByIPAddress :one
SELECT COUNT(*) FROM "ip_locations"
WHERE ip_address = $1
`

func (q *Queries) GetCountIPLocationsByIPAddress(ctx context.Context, ipAddress string) (int64, error) {
	row := q.db.QueryRow(ctx, getCountIPLocationsByIPAddress, ipAddress)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getIPLocationsByIPAddress = `-- name: GetIPLocationsByIPAddress :one
SELECT id,
    ip_address,
    country_id,
    country_code,
    city,
    -- COALESCE(ST_X(location), 0)::FLOAT as latitude,
    -- COALESCE(ST_Y(location), 0)::FLOAT as longitude,
    latitude,
    longitude,
    mystery_value
FROM "ip_locations"
WHERE ip_address = $1
LIMIT 1
`

type GetIPLocationsByIPAddressRow struct {
	ID           string
	IpAddress    string
	CountryID    pgtype.Text
	CountryCode  pgtype.Text
	City         pgtype.Text
	Latitude     pgtype.Float8
	Longitude    pgtype.Float8
	MysteryValue pgtype.Int8
}

func (q *Queries) GetIPLocationsByIPAddress(ctx context.Context, ipAddress string) (GetIPLocationsByIPAddressRow, error) {
	row := q.db.QueryRow(ctx, getIPLocationsByIPAddress, ipAddress)
	var i GetIPLocationsByIPAddressRow
	err := row.Scan(
		&i.ID,
		&i.IpAddress,
		&i.CountryID,
		&i.CountryCode,
		&i.City,
		&i.Latitude,
		&i.Longitude,
		&i.MysteryValue,
	)
	return i, err
}

type InsertIPLocationParams struct {
	ID           string
	IpAddress    string
	CountryID    pgtype.Text
	CountryCode  pgtype.Text
	City         pgtype.Text
	Latitude     pgtype.Float8
	Longitude    pgtype.Float8
	MysteryValue pgtype.Int8
}

const insertIPLocationWIP = `-- name: InsertIPLocationWIP :exec
INSERT INTO "ip_locations" (
    id, 
    ip_address, 
    country_id, 
    country_code, 
    city, 
    location, 
    mystery_value
) VALUES (
    $1::TEXT, 
    $2::TEXT,
    $3::INT,
    $4::TEXT,
    $5::TEXT,
    ST_MakePoint($6::FLOAT, 
    $7::FLOAT), 
    $8::BIGINT
)
`

type InsertIPLocationWIPParams struct {
	ID           string
	IpAddress    string
	CountryID    pgtype.Int4
	CountryCode  pgtype.Text
	City         pgtype.Text
	Latitude     pgtype.Float8
	Longitude    pgtype.Float8
	MysteryValue pgtype.Int8
}

func (q *Queries) InsertIPLocationWIP(ctx context.Context, arg InsertIPLocationWIPParams) error {
	_, err := q.db.Exec(ctx, insertIPLocationWIP,
		arg.ID,
		arg.IpAddress,
		arg.CountryID,
		arg.CountryCode,
		arg.City,
		arg.Latitude,
		arg.Longitude,
		arg.MysteryValue,
	)
	return err
}
