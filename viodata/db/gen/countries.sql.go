// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: countries.sql

package gen

import (
	"context"
)

const getCountryByID = `-- name: GetCountryByID :one
SELECT id, name FROM "countries"
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetCountryByID(ctx context.Context, id string) (Country, error) {
	row := q.db.QueryRow(ctx, getCountryByID, id)
	var i Country
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const insertCountry = `-- name: InsertCountry :one
WITH new_row AS (
	INSERT INTO "countries" (id, name)
	SELECT $1::text, $2::text
	WHERE NOT EXISTS (SELECT id, name FROM "countries" WHERE name = $2::text)
	RETURNING id, name
)
SELECT id, name FROM new_row
UNION
SELECT id, name FROM "countries" WHERE name = $2::text
`

type InsertCountryParams struct {
	Column1 string
	Column2 string
}

type InsertCountryRow struct {
	ID   string
	Name string
}

func (q *Queries) InsertCountry(ctx context.Context, arg InsertCountryParams) (InsertCountryRow, error) {
	row := q.db.QueryRow(ctx, insertCountry, arg.Column1, arg.Column2)
	var i InsertCountryRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
